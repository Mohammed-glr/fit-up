version: '3.8'

services:
  # Reverse Proxy (Nginx)
  nginx:
    image: nginx:alpine
    container_name: fitup-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api-gateway
    networks:
      - fitup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database (PostgreSQL)
  postgres:
    image: postgres:15-alpine
    container_name: fitup-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fitup}
      POSTGRES_USER: ${POSTGRES_USER:-fitup}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
    networks:
      - fitup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fitup} -d ${POSTGRES_DB:-fitup}"]
      interval: 30s
      timeout: 10s
      retries: 5
    # Only expose port for debugging - remove in production
    # ports:
    #   - "5432:5432"

  # API Gateway
  api-gateway:
    build:
      context: ..
      dockerfile: services/api-gateway/Dockerfile
    container_name: fitup-api-gateway
    environment:
      - PORT=8080
      - PUBLIC_HOST=${PUBLIC_HOST}
      - AUTH_SERVICE_URL=http://auth-service:8081
      - MESSAGE_SERVICE_URL=http://message-service:8082
      - SCHEMA_SERVICE_URL=http://schema-service:8083
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    expose:
      - "8080"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      message-service:
        condition: service_healthy
      schema-service:
        condition: service_healthy
    networks:
      - fitup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Auth Service
  auth-service:
    build:
      context: ..
      dockerfile: services/auth-service/Dockerfile
    container_name: fitup-auth-service
    environment:
      - PORT=8081
      - PUBLIC_HOST=${PUBLIC_HOST}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXP=${JWT_EXP:-86400}
      - REFRESH_TOKEN_EXP=${REFRESH_TOKEN_EXP:-2592000}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GITHUB_REDIRECT_URI=${GITHUB_REDIRECT_URI}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    expose:
      - "8081"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fitup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Message Service
  message-service:
    build:
      context: ..
      dockerfile: services/message-service/Dockerfile
    container_name: fitup-message-service
    environment:
      - PORT=8082
      - PUBLIC_HOST=${PUBLIC_HOST}
      - DATABASE_URL=${DATABASE_URL}
      - AUTH_SERVICE_URL=http://auth-service:8081
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    expose:
      - "8082"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - fitup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Schema Service
  schema-service:
    build:
      context: ..
      dockerfile: services/schema-service/Dockerfile
    container_name: fitup-schema-service
    environment:
      - PORT=8083
      - PUBLIC_HOST=${PUBLIC_HOST}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    expose:
      - "8083"
    networks:
      - fitup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: fitup-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - fitup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  fitup-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  postgres_logs:
    driver: local